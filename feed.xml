<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Thomas Tan</title>
    <description>my code, info, blog.</description>
    <link>http://thomastan.github.io/</link>
    <atom:link href="http://thomastan.github.io/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Thu, 17 Mar 2016 02:06:34 -0700</pubDate>
    <lastBuildDate>Thu, 17 Mar 2016 02:06:34 -0700</lastBuildDate>
    <generator>Jekyll v3.0.0.pre.beta9</generator>
    
      <item>
        <title>National œÄ Day</title>
        <description>&lt;p&gt;Today is 3/14, National œÄ day!  In celebration, Pizza Hut is offering free pizza for 3.14 years for those who solve three math problems.  The problems are available at &lt;a href=&quot;http://blog.pizzahut.com/flavor-news/national-pi-day-math-contest-problems-are-here-2&quot;&gt;blog.pizzahut.com&lt;/a&gt;&lt;sup id=&quot;fnref:1&quot;&gt;&lt;a href=&quot;#fn:1&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt; and I‚Äôve provided one solution below.&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;The first problem (Option A):&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;em&gt;I‚Äôm thinking of a ten-digit integer whose digits are all distinct. It happens that the number formed by the first $n$ of them is divisible by $n$ for each $n$ from 1 to 10. What is my number?&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;can be solved in 18 or so lines by hand.  For those rusty on their rules of divisibility, the first problem can also be brute forced, after going through a few processes of elimination.  The C code is below, since C is fastest for these kinds of things üòÄ:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#include &amp;lt;stdio.h&amp;gt;

/*
 * We know a few things, such as:
 *  - For the 10 digit number has to be divisible 10, the last digit must be 0.
 *  - Consequently, 5 is the only option for the fifth digit, so that any
 *    number formed from the first through fifth digit is divisible by 5.
 *  - All even place digits must be a 2, 4, 6 or 8.
 *  - All odd place digits must be a 1, 3, 7 or 9.
 *  - Moreover, since the third digit is odd, the fourth digit must be 2 or 6.
 *  - Likewise, since the seventh digit is odd, the eigth digit must be 2 or 6.
 *  - Hence, the second and sixth digits must be 4 or 8.
 */

long pow10(int n) {
    int product = 1;
    for (int i = 0; i &amp;lt; n; i++)
        product *= 10;
    return product;
}

void pizzahut(int params) {
    for (long i = pow10(9); i &amp;lt;= 9999999990L; i += 10) {
        // only check numbers where the fifth digit is a 5
        if (i / 100000 % 10 != 5)
            continue;

        // only check numbers if the second, fourth, sixth and eighth digits are
        // 2/4/6/8
        for (int j = 0, places[] = {2, 4, 6, 8}; j &amp;lt; 4; j++) {
            int digit = i / pow10(10 - places[j]) % 10;
            if (places[j] == 4 || places[j] == 8) {
                if (digit != 2 &amp;amp;&amp;amp; digit != 6)
                    goto nextCandidate;
            } else if (places[j] == 2 || places[j] == 6)
                if (digit != 4 &amp;amp;&amp;amp; digit != 8)
                    goto nextCandidate;
        }

        // only check numbers if the first, third, seventh and ninth digits are
        // 1/3/7/9
        for (int j = 0, places[] = {1, 3, 7, 9}; j &amp;lt; 4; j++) {
            int digit = i / pow10(10 - places[j]) % 10;
            if (digit != 1 &amp;amp;&amp;amp; digit != 3 &amp;amp;&amp;amp; digit != 7 &amp;amp;&amp;amp; digit != 9)
                goto nextCandidate;
        }

        {
            int digitsUsed[10] = {-1, -1, -1, -1, -1, -1, -1, -1, -1, -1};
            // check the n-th digit&#39;s uniqueness and divisibility by 1..n
            for (int numDigits = 1; numDigits &amp;lt;= 10; numDigits++) {
                long toCheck = i / pow10(10 - numDigits);

                // check n-th the digit is not a repeat
                int lastDigit = toCheck - (toCheck / 10) * 10, j;
                for (j = 0; digitsUsed[j] != -1; j++)
                    if (lastDigit == digitsUsed[j])
                        goto nextCandidate;
                digitsUsed[j] = lastDigit;

                // check the first n digits form a number divisible by n
                if (toCheck % numDigits != 0)
                    goto nextCandidate;
                else if (numDigits == 10) {
                    printf(&quot;%ld\n&quot;, toCheck);
                    if (params &amp;gt; 1)  // search more answers if given parameter
                        return;
                }
            }
        }

    nextCandidate:
        continue;
    }
}

int main(int argc, char **argv) {
    pizzahut(argc);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Good luck on solving the remaining two problems!&lt;/p&gt;

&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:1&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;http://blog.pizzahut.com/flavor-news/national-pi-day-math-contest-problems-are-here-2&quot;&gt;http://blog.pizzahut.com/flavor-news/national-pi-day-math-contest-problems-are-here-2&lt;/a&gt; &lt;a href=&quot;#fnref:1&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;
</description>
        <pubDate>Mon, 14 Mar 2016 00:00:00 -0700</pubDate>
        <link>http://thomastan.github.io/post/quickselect</link>
        <guid isPermaLink="true">http://thomastan.github.io/post/quickselect</guid>
        
        <category>code</category>
        
        <category>C</category>
        
        <category>algorithms</category>
        
        <category>goto</category>
        
        <category>math</category>
        
        <category>pi</category>
        
        <category>divisibility</category>
        
        <category>contest</category>
        
        <category>pizza</category>
        
        
        <category>post</category>
        
      </item>
    
      <item>
        <title>Finding the n-th maximum or k-th order statistic</title>
        <description>&lt;p&gt;Closely related to the Quicksort algorithm is the not-as-popular, but closely related &lt;strong&gt;Quicksearch&lt;/strong&gt;.  A common problem is to find the $n$-th largest or ‚Äú$n$-th maximum‚Äù in a set without having to first sort the set.  More formally, Quicksearch finds the $k$-th order stastic, which is actually the $k$-th &lt;em&gt;smallest&lt;/em&gt; of the set.  However, the search can easily be flipped so that Quicksearch yields the $k$-th largest element instead.&lt;/p&gt;

&lt;!--more--&gt;

&lt;h4 id=&quot;quicksearch&quot;&gt;Quicksearch&lt;/h4&gt;
&lt;p&gt;A pivot is selected to partition the list in two, with the left list containing elements smaller than the partition and the right having those larger than it.  If the pivot is in the $k$-th position, then it is the $k$-th order statistic and the search ends.  Otherwise, the $k$-th order statistic exists either in the left sublist, if $k$ is less than the index of the pivot, or in the right sublist if $k$ is greater than the index of the pivot.  Unlike Quicksort, where sorting continues on both sublists after the pivot index is obtained, in Quicksearch, recursion only needs to continue on &lt;strong&gt;one&lt;/strong&gt; of the sublists.&lt;/p&gt;

&lt;p&gt;Here is C code for Quicksearch:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#include &amp;lt;stdio.h&amp;gt;

int quickselect(int a[], int n, int k);
int select(int a[], int left, int right, int k);
int partition(int a[], int left, int right, int k);

int quickselect(int a[], int n, int k) {
    return select(a, 0, n - 1, k);
}

int select(int a[], int left, int right, int k) {
    int pivotIndex = partition(a, left, right, k);

    if (k == pivotIndex)
        return a[k];
    else if (k &amp;lt; pivotIndex)
        return select(a, left, pivotIndex - 1, k);
    else
        return select(a, pivotIndex + 1, right, k);
}

int partition(int a[], int left, int right, int k) {
    int pivot = a[k];  // try finding the k-th smallest in slot k

    a[k] = a[right], a[right] = pivot;

    // place all elements smaller than the pivot on the left
    int index = left, temp;
    for (int i = left; i &amp;lt; right; i++)
        if (a[i] &amp;lt; pivot) {
            temp = a[index], a[index] = a[i], a[i] = temp;
            index++;
        }

    // place the pivot immediately after all these smaller elements
    temp = a[index], a[index] = a[right], a[right] = temp;
    return index;
}

int main() {
    int a[] = {-3, -2, 5, 7, 37, 2, 8, 19, 28, 13, -6, 200};
    int i, n = sizeof a / sizeof a[0];

    printf(&quot;%d\n&quot;, quickselect(a, n, 1));
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can observe how closely the above resembles &lt;a href=&quot;/post/recursive-sorting#quicksort&quot;&gt;Quicksort code&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Quicksearch is more conveniently implemented in C++ thanks to the vector STL:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#include &amp;lt;iostream&amp;gt;
#include &amp;lt;vector&amp;gt;
using namespace std;

int quickselect(vector&amp;lt;int&amp;gt; a, int k) {
    vector&amp;lt;int&amp;gt; below, above;
    int pivot = a[k - 1];

    for (vector&amp;lt;int&amp;gt;::iterator i = a.begin(); i != a.end(); i++)
        if (*i &amp;lt; pivot)
            below.push_back(*i);
        else if (*i &amp;gt; pivot)
            above.push_back(*i);

    if (k == below.size() + 1)
        return pivot;
    else if (k &amp;lt;= below.size())
        return quickselect(below, k);
    else
        return quickselect(above, k - (below.size() + 1));
}

int main() {
    int a[] = {-3, -2, 5, 7, 37, 2, 8, 19, 28, 13, -6, 200};
    int n = sizeof a / sizeof a[0];
    vector&amp;lt;int&amp;gt; v(a, a + n);

    printf(&quot;%d\n&quot;, quickselect(v, 7));
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Comments: Like Quicksort, the worst case running time of Quicksearch is $\mathcal{O}(n^2)$.  This is not a common scenario (why Quicksort is still commonly found even though the worst case running time of Merge sort is not quadratic), and the best case is more prevalent.  The best case and average performance of Quicksearch is $\mathcal{O}(n)$.&lt;/p&gt;
</description>
        <pubDate>Thu, 30 Apr 2015 00:00:00 -0700</pubDate>
        <link>http://thomastan.github.io/post/quickselect</link>
        <guid isPermaLink="true">http://thomastan.github.io/post/quickselect</guid>
        
        <category>code</category>
        
        <category>C</category>
        
        <category>C++</category>
        
        <category>simple</category>
        
        <category>searching</category>
        
        <category>algorithms</category>
        
        <category>recursion</category>
        
        <category>quick</category>
        
        <category>quick-sort</category>
        
        <category>quick-select</category>
        
        
        <category>post</category>
        
      </item>
    
      <item>
        <title>A bug in Google Chrome and Apple Safari (and the fix)</title>
        <description>&lt;blockquote&gt;
  &lt;p&gt;Chrome, Safari (and other WebKit and Blink-based browsers) don‚Äôt handle alternate stylesheets correctly.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Of the three types of stylesheets,  &lt;em&gt;persistent&lt;/em&gt; stylesheets are always applied on page load.  They act as a good &lt;em&gt;base&lt;/em&gt; stylesheet and are identified by having no &lt;code&gt;title&lt;/code&gt; attribute and have a &lt;code&gt;rel&lt;/code&gt; attribute of simply ‚Äústylesheet‚Äù.  &lt;em&gt;Preferred&lt;/em&gt; stylesheets have the same &lt;code&gt;rel&lt;/code&gt; attribute but &lt;em&gt;do&lt;/em&gt; have a &lt;code&gt;title&lt;/code&gt; attribute.  Only one preferred stylesheet may be active at the same time.  &lt;em&gt;Alternate&lt;/em&gt; stylesheets have &lt;code&gt;rel=&quot;alternate stylesheet&quot;&lt;/code&gt; and a &lt;code&gt;title&lt;/code&gt; attribute.&lt;/p&gt;

&lt;p&gt;Selecting between different stylesheets involves using JavaScript to switch preferred and alternate stylesheets between &lt;code&gt;.disabled = false&lt;/code&gt; and &lt;code&gt;.disabled = true&lt;/code&gt;.  All works well for Firefox and IE browsers, but not so for the WebKit/Blink based browsers (Safari, Chrome, Opera).  For whatever reason, &lt;!--more--&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;for WebKit/Blink browsers, alternate stylesheets are ‚Äúenabled‚Äù by default, even though they aren‚Äôt being used and aren‚Äôt being shown.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This leaves us in the situation where to &lt;em&gt;visually&lt;/em&gt; enable alternate stylsheets in WebKit/Blink, setting &lt;code&gt;.disabled = false&lt;/code&gt; does nothing because the element is already &lt;em&gt;internally&lt;/em&gt; enabled. A force enabling of state can be performed with the workaround&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;link[i].disabled = true;
link[i].disabled = false;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;seems to work, but if an alternate stylesheet is being set on a page load dependent on a cookie setting, the page will load without a stylesheet at all.  Of course, when there is stylesheet being shown at all, switching to an undesired alternate stylesheet and quick switching to the desired stylesheet in quick succession will achieve the proper outcome, but this will result in a ‚Äúflicker‚Äù where an intermediate stylesheet is shown before the final outcome.&lt;/p&gt;

&lt;h4 id=&quot;the-solution-without-side-effects-in-firefox-and-ie&quot;&gt;The solution (without side-effects in Firefox and IE)&lt;/h4&gt;

&lt;p&gt;The solution is to have no &lt;em&gt;preferred&lt;/em&gt; stylesheets (having base &lt;em&gt;persistent&lt;/em&gt; stylesheets is still okay).  Give all stylesheets a &lt;code&gt;rel=&quot;alternate stylesheet&quot;&lt;/code&gt; attribute (&lt;em&gt;i.e.&lt;/em&gt; make them all alternative stylesheets) and use JavaScript to iterate through these, in the page &lt;code&gt;&amp;lt;head&amp;gt;&lt;/code&gt; &lt;strong&gt;before&lt;/strong&gt; the &lt;code&gt;&amp;lt;main&amp;gt;&lt;/code&gt; body loads, and set the desired stylesheet to have &lt;code&gt;rel=&quot;stylesheet&quot;&lt;/code&gt; and all others to have &lt;code&gt;rel=&quot;alternate stylesheet&quot;&lt;/code&gt;.  The same procedure (JavaScript function) can be called when the user performs an action on the page to change the stylesheet.&lt;/p&gt;

&lt;p&gt;This solution produces no stylesheet ‚Äúflickering‚Äù.  You can see the solution in action on this site =)&lt;/p&gt;

&lt;p&gt;Time for me to go launch a defect with the WebKit team!&lt;/p&gt;
</description>
        <pubDate>Fri, 30 Jan 2015 00:00:00 -0700</pubDate>
        <link>http://thomastan.github.io/post/bug-in-chrome-safari</link>
        <guid isPermaLink="true">http://thomastan.github.io/post/bug-in-chrome-safari</guid>
        
        <category>code</category>
        
        <category>google</category>
        
        <category>chrome</category>
        
        <category>apple</category>
        
        <category>safari</category>
        
        <category>JavaScript</category>
        
        <category>CSS</category>
        
        <category>stylesheets</category>
        
        
        <category>post</category>
        
      </item>
    
      <item>
        <title>Isolated Python environments %%% DRAFT %%%</title>
        <description>&lt;p&gt;A polynomial of degree $n$, $P_n(x) = a_n x^n + a_{n-1} x^{n-1} + a_{n-2} x^{n-2} + \ldots + a_0$ can be represented in C as the vector &lt;code&gt;{ a[0], a[1], ..., a[n] }&lt;/code&gt;.  The vector has size $n+1$. &lt;!--more--&gt;&lt;/p&gt;

&lt;p&gt;Such a polynomial can be differentiated with a C function operating on the polynomial‚Äôs co√´fficient vector (here called &lt;code&gt;coeff&lt;/code&gt;):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#include &amp;lt;stdlib.h&amp;gt;

void differentiate(float *coeff, int degree) {
    int i;
    for (i = 0; i &amp;lt;= degree - 1; i++)
        coeff[i] = (i + 1) * coeff[i + 1];

    if (degree &amp;gt;= 1) {
        // The polynomial and its co√´fficient vector has a new size
        coeff = (float *) realloc(coeff, degree * sizeof(float));

        degree--;
    }
}
&lt;/code&gt;&lt;/pre&gt;
</description>
        <pubDate>Thu, 01 Jan 2015 00:00:00 -0700</pubDate>
        <link>http://thomastan.github.io/post/draft-test</link>
        <guid isPermaLink="true">http://thomastan.github.io/post/draft-test</guid>
        
        <category>code</category>
        
        <category>python</category>
        
        <category>isolation</category>
        
        <category>virtual-machine</category>
        
        <category>virtualenv</category>
        
        <category>pip</category>
        
        
        <category>post</category>
        
      </item>
    
      <item>
        <title>Isolated Ruby environments</title>
        <description>&lt;p&gt;First, make sure you have the latest &lt;code&gt;gems&lt;/code&gt; and &lt;code&gt;bundler&lt;/code&gt; installed:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo gem update --system
sudo gem install bundler
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now &lt;code&gt;ch&lt;/code&gt; into your project directory and create a plaintext &lt;code&gt;Gemfile&lt;/code&gt;.  The first line is where to download gem source files from, and following lines are the gems your project requires:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;source &#39;https://rubygems.org&#39;

gem &#39;jekyll&#39;, &#39;&amp;gt;= 3.0.0.pre.beta2&#39;
gem &#39;jekyll-tagging&#39;
gem &#39;jekyll-paginate&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then, install the required gems and dependencies: &lt;!--more--&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;bundle install --path=.rubyenv --binstubs=.gems
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Note: &lt;code&gt;--path&lt;/code&gt; is a remembered option by bundle.&lt;/p&gt;

&lt;p&gt;Generated in your project directory, alongside &lt;code&gt;Gemfile&lt;/code&gt; will be:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;.bundle&lt;/code&gt;, listing the relative path of the environment created by bundler,&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;.gems&lt;/code&gt;, a folder containing the gem executables,&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;.rubyenv/ruby/&lt;/code&gt;, a folder containing yours gems‚Äô other files,&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;Gemfile.lock&lt;/code&gt;, a list of your installed gems and the installed gems these are dependent on.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;By running binaries from, and/or adding the &lt;code&gt;.gems/&lt;/code&gt; folder to your &lt;code&gt;PATH&lt;/code&gt;, you will be using your isolated Ruby environment. When you no longer want to work in this environment, simply remove &lt;code&gt;.gems/&lt;/code&gt; from your &lt;code&gt;PATH&lt;/code&gt;. To blow away your isolated environment, remove the &lt;code&gt;.rubyenv&lt;/code&gt; and &lt;code&gt;.gems&lt;/code&gt; folders from your project (you can also remove &lt;code&gt;.bundle&lt;/code&gt;, &lt;code&gt;Gemfile&lt;/code&gt; and &lt;code&gt;Gemfile.lock&lt;/code&gt;).&lt;/p&gt;
</description>
        <pubDate>Thu, 01 May 2014 00:00:00 -0700</pubDate>
        <link>http://thomastan.github.io/post/isolated-ruby-environments</link>
        <guid isPermaLink="true">http://thomastan.github.io/post/isolated-ruby-environments</guid>
        
        <category>code</category>
        
        <category>ruby</category>
        
        <category>isolation</category>
        
        <category>virtual-machine</category>
        
        <category>gem</category>
        
        <category>gems</category>
        
        <category>bundle</category>
        
        <category>bundler</category>
        
        
        <category>post</category>
        
      </item>
    
      <item>
        <title>Isolated Python environments</title>
        <description>&lt;p&gt;You should only ever need (admin access) to globally install two Python packages:&lt;/p&gt;

&lt;pre class=&quot;bash&quot;&gt;&lt;code&gt;sudo easy_install pip
sudo pip install virtualenv
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The first is &lt;code&gt;pip&lt;/code&gt; and this allows you to install the enabling &lt;code&gt;virtualenv&lt;/code&gt;.  With &lt;code&gt;virtualenv&lt;/code&gt;, you can have isolated Python environments, each with their own copy of &lt;code&gt;pip&lt;/code&gt;. &lt;!--more--&gt;&lt;/p&gt;

&lt;p&gt;Now &lt;code&gt;ch&lt;/code&gt; into the root of a project directory and run&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;virtualenv env
source env/bin/activate
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This creates the Python environment in &lt;code&gt;env/&lt;/code&gt; and activates the environment so the project uses env/bin/python.  Add &lt;code&gt;env/&lt;/code&gt; to .gitignore (or similar) if you‚Äôre using a version control system.&lt;/p&gt;

&lt;p&gt;With &lt;code&gt;deactivate&lt;/code&gt;, the &lt;code&gt;env/bin/deactivate&lt;/code&gt; binary will bring you back to your normal environment.&lt;/p&gt;

&lt;h4 id=&quot;requirements-files&quot;&gt;Requirements files&lt;/h4&gt;
&lt;p&gt;You can state and install dependencies in your Python environments by placing them in the &lt;code&gt;requirements.txt&lt;/code&gt; file in a project‚Äôs root directory.  These dependencies are installed with&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;env/bin/pip install -r requirements.txt
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Have fun installing as many Python packages as you‚Äôd like without polluting your systems!&lt;/p&gt;
</description>
        <pubDate>Thu, 13 Feb 2014 00:00:00 -0700</pubDate>
        <link>http://thomastan.github.io/post/isolated-python-environments</link>
        <guid isPermaLink="true">http://thomastan.github.io/post/isolated-python-environments</guid>
        
        <category>code</category>
        
        <category>python</category>
        
        <category>isolation</category>
        
        <category>virtual-machine</category>
        
        <category>virtualenv</category>
        
        <category>pip</category>
        
        
        <category>post</category>
        
      </item>
    
      <item>
        <title>Quickly test for a &quot;power of two&quot;</title>
        <description>&lt;p&gt;For positive integers $k$, use just two to three lines:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;C/C++:&lt;/p&gt;

    &lt;pre&gt;&lt;code&gt;#include &amp;lt;stdbool.h&amp;gt; // not needed in C++

bool fromDoubling(unsigned k) {
    return !((k - 1) &amp;amp; k) &amp;amp;&amp;amp; k;
}
&lt;/code&gt;&lt;/pre&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Python:&lt;/p&gt;

    &lt;pre&gt;&lt;code&gt;def fromDoubling(k):
    return not((k - 1) &amp;amp; k) and k
&lt;/code&gt;&lt;/pre&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Perl:&lt;/p&gt;

    &lt;pre&gt;&lt;code&gt;use boolean;

sub fromDoubling {
    sprintf(&quot;%b&quot;, shift) =~ /^10*$/ ? true : false;
}
&lt;/code&gt;&lt;/pre&gt;
  &lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Sat, 26 Oct 2013 00:00:00 -0700</pubDate>
        <link>http://thomastan.github.io/post/power-of-two</link>
        <guid isPermaLink="true">http://thomastan.github.io/post/power-of-two</guid>
        
        <category>code</category>
        
        <category>simple</category>
        
        <category>C</category>
        
        <category>perl</category>
        
        <category>python</category>
        
        <category>kiss</category>
        
        <category>power</category>
        
        <category>bitwise</category>
        
        
        <category>post</category>
        
      </item>
    
      <item>
        <title>The min and max functions</title>
        <description>&lt;p&gt;Most people na√Øvely implement the maximum function using five lines:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;int max(int a, int b) {
    if (a &amp;gt; b)
        return a;
    else
        return b;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;More elegantly, the ‚Äúif‚Äù and ‚Äúelse‚Äù conditions can be replaced by the question mark operator &lt;code&gt;?:&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;int maximum = a &amp;gt; b ? a : b;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Oftentimes, all three of ‚Äúif‚Äù, ‚Äúelse‚Äù and ‚Äú?:‚Äù are unavailable to use (such as in low-level hardware design) or are just a pain to implement because of the jumping around involved (when writing things in assembly, per se).  In these cases, an easy way to find the maximum is&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;a - ((a - b) &amp;amp; -(a &amp;lt; b));
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;A sign change in each of the above implementations will give the minimum.&lt;/p&gt;
</description>
        <pubDate>Mon, 14 Oct 2013 00:00:00 -0700</pubDate>
        <link>http://thomastan.github.io/post/min-and-max-functions</link>
        <guid isPermaLink="true">http://thomastan.github.io/post/min-and-max-functions</guid>
        
        <category>math</category>
        
        <category>code</category>
        
        <category>C</category>
        
        <category>simple</category>
        
        <category>hardware</category>
        
        <category>assembly</category>
        
        <category>bitwise</category>
        
        <category>logic</category>
        
        <category>kiss</category>
        
        <category>max</category>
        
        <category>min</category>
        
        
        <category>post</category>
        
      </item>
    
      <item>
        <title>A 20-year old binary search mistake</title>
        <description>&lt;p&gt;Binary searching for a certain ‚Äúkey‚Äù within a sorted list involves looking at the ‚Äúmiddle‚Äù element, then, if the key isn‚Äôt found, looking through either the first or second half of the list.  The binary searching process is repeated on the sublist.&lt;/p&gt;

&lt;p&gt;The following implementation, previously used almost everywhere, had a mistake that evaded detection for 20 years:&lt;/p&gt;

&lt;!--more--&gt;

&lt;pre&gt;&lt;code&gt;int binarySearch(int a[], int length, int key) {
    int start = 0, middle, end = length - 1;

    while (start &amp;lt;= end) {
        middle = (start + end) / 2;

        if (a[middle] == key)
            return middle;
        else if (key &amp;gt; a[middle])
            start = middle + 1;
        else if (key &amp;lt; a[middle])
            end = middle - 1;
    }

    return -1;  /* the key wasn&#39;t found */
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The problem is in the calculation of &lt;code&gt;middle&lt;/code&gt; for certain sublists.  For sublists closer toward the right of the original list there is a chance of &lt;code&gt;(start + end)&lt;/code&gt; overflowing. The fix is to restrict calculation of &lt;code&gt;middle&lt;/code&gt; from going above &lt;code&gt;length&lt;/code&gt;, done by replacing&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;middle = (start + end) / 2;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;with&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;middle = start + (end - start) / 2;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now &lt;code&gt;middle&lt;/code&gt;, along with the intermediate calculation of it, is guaranteed to always be less than &lt;code&gt;length&lt;/code&gt;.  The use of a &lt;code&gt;middle&lt;/code&gt; to iteratively split the list in half means the complexity of binary search is $\mathcal{O}(\log_2 n)$.&lt;/p&gt;
</description>
        <pubDate>Thu, 26 Sep 2013 00:00:00 -0700</pubDate>
        <link>http://thomastan.github.io/post/binary-search-mistake</link>
        <guid isPermaLink="true">http://thomastan.github.io/post/binary-search-mistake</guid>
        
        <category>code</category>
        
        <category>C</category>
        
        <category>mistakes</category>
        
        <category>max</category>
        
        <category>overflow</category>
        
        <category>recursion</category>
        
        <category>searching</category>
        
        
        <category>post</category>
        
      </item>
    
      <item>
        <title>Swapping numbers without a temporary variable</title>
        <description>&lt;p&gt;Most people do this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;int temp;
temp = a, a = b, b = temp;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;when you can do this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;a ^= b ^= a ^= b;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Remember, &lt;a href=&quot;../tag/kiss&quot;&gt;KISS&lt;/a&gt; ‚Äî keep it &lt;a href=&quot;writing-simple-code&quot;&gt;simple&lt;/a&gt;, stupid!&lt;/p&gt;
</description>
        <pubDate>Sat, 14 Sep 2013 00:00:00 -0700</pubDate>
        <link>http://thomastan.github.io/post/swapping-without-temp</link>
        <guid isPermaLink="true">http://thomastan.github.io/post/swapping-without-temp</guid>
        
        <category>code</category>
        
        <category>simple</category>
        
        <category>C</category>
        
        <category>kiss</category>
        
        <category>xor</category>
        
        <category>bitwise</category>
        
        
        <category>post</category>
        
      </item>
    
  </channel>
</rss>
